import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import json
import os
import threading
import importlib.util
import sys
import pymysql
import pymysql.cursors
import io, contextlib
import datetime
import pytz
import asyncio
import time
import requests
import tempfile
import nest_asyncio
from telegram import Bot, Update
import subprocess
import emoji

DB_CONFIG = None

BOT_PROCESS = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞
def is_token_valid(token):
    url = f"https://api.telegram.org/bot{token}/getMe"
    try:
        r = requests.get(url, timeout=5)
        data = r.json()
        return data.get("ok", False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False
def restart_application():
    python = sys.executable
    os.execl(python, python, *sys.argv)
# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loop
nest_asyncio.apply()

from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CallbackContext
from telegram.error import ChatMigrated

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
def copy_text(widget):
    widget.event_generate("<<Copy>>")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
def paste_text(widget, event=None):
    try:
        text = widget.clipboard_get()
        print("–í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç:", text)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        widget.insert(tk.INSERT, text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ:", e)
    return "break"




# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤—Å—Ç–∞–≤–∫–æ–π
def add_context_menu(widget):
    menu = tk.Menu(widget, tearoff=0)
    menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=lambda: copy_text(widget))
    menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=lambda: paste_text(widget))

    def show_menu(event):
        menu.tk_popup(event.x_root, event.y_root)

    widget.bind("<Button-3>", show_menu)  # –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
    widget.bind("<Control-c>", lambda event: copy_text(widget))  # Ctrl+C
    widget.bind("<Control-v>", lambda event: paste_text(widget, event))  # Ctrl+V



DB_CONFIG = None
is_db_working = 1
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ ---
def load_db_config():
    if os.path.exists("db_config.json"):
        with open("db_config.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {
        "host": "ilyasiux.beget.tech",
        "user": "ilyasiux_prop",
        "password": "Propeller187",
        "db": "ilyasiux_prop"
    }


def get_db_connection():
    global DB_CONFIG, is_db_working
    if not DB_CONFIG:
        DB_CONFIG = load_db_config()
        if not DB_CONFIG:
            raise Exception("–û—à–∏–±–∫–∞: DB_CONFIG –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!")
    try:
        conn = pymysql.connect(
            host=DB_CONFIG.get("host", "localhost"),
            user=DB_CONFIG.get("user", "root"),
            password=DB_CONFIG.get("password", ""),
            db=DB_CONFIG.get("db", "test"),
            charset="utf8mb4",
            cursorclass=pymysql.cursors.DictCursor
        )
        is_db_working = 1
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {e}")
        is_db_working = 0
        # –§–æ–ª–±—ç–∫-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        return pymysql.connect(
            host='ilyasiux.beget.tech',
            user='ilyasiux_prop',
            password='Propeller187',
            db='ilyasiux_prop',
            charset="utf8mb4",
            cursorclass=pymysql.cursors.DictCursor
        )

def create_tables():
    conn = get_db_connection()
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã categories
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS categories (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL UNIQUE
        )
    """)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subcategories
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS subcategories (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            category_id INT NOT NULL,
            FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
        )
    """)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã modules
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS modules (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            file_path TEXT NOT NULL,
            category_id INT NOT NULL,
            subcategory_id INT NOT NULL,
            start_time TIME DEFAULT NULL,
            FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE,
            FOREIGN KEY (subcategory_id) REFERENCES subcategories(id) ON DELETE CASCADE
        )
    """)

    conn.commit()
    cursor.close()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã bot_settings (—Å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã bot_settings (—Å –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã)
def load_bot_settings():
    conn = get_db_connection()
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bot_settings (
            id INT PRIMARY KEY AUTO_INCREMENT,
            token VARCHAR(255) NOT NULL,
            chat_id BIGINT NOT NULL
        )
    """)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π
    cursor.execute("SELECT COUNT(*) AS count FROM bot_settings")
    result = cursor.fetchone()

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if result['count'] == 0:
        cursor.execute("""
            INSERT INTO bot_settings (token, chat_id)
            VALUES ('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω', 0)
        """)
        conn.commit()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cursor.execute("SELECT token, chat_id FROM bot_settings LIMIT 1")
    bot_settings = cursor.fetchone()

    conn.close()
    return bot_settings if bot_settings else {"token": "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω", "chat_id": 0}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
def update_bot_settings(token, chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE bot_settings
        SET token = %s, chat_id = %s
        WHERE id = 1
    """, (token, chat_id))
    conn.commit()
    conn.close()

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    global TOKEN, SCHEDULED_CHAT_ID
    TOKEN = token
    SCHEDULED_CHAT_ID = chat_id
    print(f"–¢–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: TOKEN={TOKEN}, CHAT_ID={SCHEDULED_CHAT_ID}")



def stop_current_bot():
    global BOT_APPLICATION, BOT_LOOP, BOT_THREAD
    if BOT_APPLICATION is not None and BOT_LOOP is not None:
        try:
            future_stop = asyncio.run_coroutine_threadsafe(BOT_APPLICATION.stop(), BOT_LOOP)
            future_stop.result(timeout=10)
            future_shutdown = asyncio.run_coroutine_threadsafe(BOT_APPLICATION.shutdown(), BOT_LOOP)
            future_shutdown.result(timeout=10)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
        BOT_APPLICATION = None
        # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã getUpdates —Ç–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        time.sleep(1)
DB_CONFIG = {}
TOKEN = ""
SCHEDULED_CHAT_ID = 0


BOT_PROCESS = None
BOT_STATUS = False  # –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ (True ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç, False ‚Äî –≤—ã–∫–ª—é—á–µ–Ω)

class BotSettingsTab(ttk.Frame):
    def __init__(self, master, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.create_widgets()
        self.refresh_bot_settings()


    def create_widgets(self):
        ttk.Label(self, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", font=("Arial", 14)).pack(pady=10)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ + –∫–Ω–æ–ø–∫–∞ "–í—Å—Ç–∞–≤–∏—Ç—å"
        token_frame = ttk.Frame(self)
        token_frame.pack(pady=5, fill="x")
        ttk.Label(token_frame, text="–¢–æ–∫–µ–Ω –±–æ—Ç–∞:").pack(side="left")
        self.token_var = tk.StringVar(value=TOKEN)
        self.token_entry = ttk.Entry(token_frame, textvariable=self.token_var, width=40)
        self.token_entry.pack(side="left", padx=(5, 5))
        add_context_menu(self.token_entry)
        ttk.Button(token_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.insert_clipboard_token).pack(side="left")

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
        self.status_label = ttk.Label(self, text="üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω", foreground="red", font=("Arial", 12))
        self.status_label.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞
        self.toggle_button = ttk.Button(self, text="–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞", command=self.toggle_bot)
        self.toggle_button.pack(pady=5)

        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        ttk.Label(self, text="–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:").pack(pady=5)
        frame_chat_list = ttk.Frame(self)
        frame_chat_list.pack(fill="both", expand=True, padx=10, pady=5)

        # –°–æ–∑–¥–∞—ë–º Listbox –¥–ª—è —á–∞—Ç–æ–≤
        self.chat_listbox = tk.Listbox(frame_chat_list, height=8)
        self.chat_listbox.pack(side="left", fill="both", expand=True)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        chat_scrollbar = ttk.Scrollbar(frame_chat_list, orient="vertical", command=self.chat_listbox.yview)
        chat_scrollbar.pack(side="right", fill="y")
        self.chat_listbox.config(yscrollcommand=chat_scrollbar.set)

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"
        ttk.Button(self, text="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", command=self.get_chat_list).pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞"
        ttk.Button(self, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞", command=self.check_admin_rights).pack(pady=5)

        # –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        ttk.Button(self, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_bot_settings).pack(pady=10)

    def refresh_bot_settings(self):
        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã
        bot_settings = load_bot_settings()
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.token_var.set(bot_settings.get("token", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω"))
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ–±–Ω–æ–≤–∏—Ç–µ –∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ

    def insert_clipboard_token(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞."""
        try:
            text = self.clipboard_get()
            self.token_var.set(text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞: {e}")

    def insert_clipboard_token(self):
        try:
            text = self.clipboard_get()
            self.token_var.set(text)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞: {e}")

    def get_chat_list(self):
        token = self.token_var.get()
        if BOT_STATUS:  # –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messagebox.showerror("–û—à–∏–±–∫–∞", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤!")
            return
        if not token:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        asyncio.run(self.fetch_chat_list(token))

    async def fetch_chat_list(self, token):
        bot = Bot(token=token)
        try:
            updates = await bot.get_updates(timeout=10)
            chats = {}
            for update in updates:
                if update.message:
                    chat_id = update.message.chat.id
                    chat_title = update.message.chat.title or f"–õ–∏—á–Ω—ã–π —á–∞—Ç {chat_id}"
                    chats[chat_id] = chat_title

            self.chat_listbox.delete(0, tk.END)
            for chat_id, title in chats.items():
                self.chat_listbox.insert(tk.END, f"{chat_id} - {title}")

            if not chats:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ë–æ—Ç –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ.\n"
                                    "–ï—Å–ª–∏ –±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∞—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")

    def check_admin_rights(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ."""
        selection = self.chat_listbox.curselection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return
        token = self.token_var.get()
        chat_str = self.chat_listbox.get(selection[0])
        chat_id = chat_str.split(" - ")[0].strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        asyncio.run(self.fetch_admin_rights(token, chat_id))

    async def fetch_admin_rights(self, token, chat_id):
        try:
            chat_id = int(chat_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —á–∏—Å–ª–æ
            bot = Bot(token=token)
            await bot.initialize()  # –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º

            admins = await bot.get_chat_administrators(chat_id)
            for admin in admins:
                if admin.user.id == bot.id:
                    messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", f"‚úÖ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ {chat_id}.")
                    return

            messagebox.showwarning("–†–µ–∑—É–ª—å—Ç–∞—Ç", f"‚ö†Ô∏è –ë–æ—Ç –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ {chat_id}.")
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –û—à–∏–±–∫–∞: Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")
            print(e)

    def save_bot_settings(self):
        selection = self.chat_listbox.curselection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º!")
            return
        token = self.token_var.get()
        chat_str = self.chat_listbox.get(selection[0])
        try:
            chat_id = int(chat_str.split(" - ")[0].strip())
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID!")
            return
        update_bot_settings(token, chat_id)
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    def toggle_bot(self):
        global BOT_PROCESS, BOT_STATUS
        if BOT_STATUS:
            if BOT_PROCESS is not None:
                print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞...")
                BOT_PROCESS.terminate()
                BOT_PROCESS.join(timeout=5)
                BOT_PROCESS = None
            BOT_STATUS = False
            self.status_label.config(text="üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω", foreground="red")
            self.toggle_button.config(text="–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            token = self.token_var.get()
            if token in ("0", 0, "", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω"):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω!")
                return

            if BOT_PROCESS is not None:
                print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ...")
                BOT_PROCESS.terminate()
                BOT_PROCESS.join(timeout=5)
                BOT_PROCESS = None

            print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º run_bot –Ω–∞–ø—Ä—è–º—É—é:
            BOT_PROCESS = multiprocessing.Process(target=run_bot, args=(token,))
            BOT_PROCESS.start()

            BOT_STATUS = True
            self.status_label.config(text="üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", foreground="green")
            self.toggle_button.config(text="–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
start_time_bot = time.time()
message_count = {}
is_bot_active = True


# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á ---
def create_tasks_table():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bot_tasks (
            id INT AUTO_INCREMENT PRIMARY KEY,
            category VARCHAR(255) NOT NULL,
            subcategory VARCHAR(255) NULL,
            start_time TIME NOT NULL,
            end_time TIME NOT NULL,
            emoji VARCHAR(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '‚úÖ',
            selection_mode VARCHAR(20) NOT NULL DEFAULT '—Ä–∞–Ω–¥–æ–º'
        ) CHARACTER SET=utf8mb4 COLLATE=utf8mb4_unicode_ci
    """)
    conn.commit()
    cursor.close()
    conn.close()





# ================= –§–£–ù–ö–¶–ò–ò –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ê =================

def get_active_task():
    conn = get_db_connection()
    cursor = conn.cursor()
    now = datetime.datetime.now().time()
    query = """
        SELECT id, category, subcategory, start_time, end_time, emoji, selection_mode
        FROM bot_tasks 
        WHERE start_time <= %s AND end_time >= %s 
        ORDER BY RAND() LIMIT 1
    """
    cursor.execute(query, (now, now))
    task = cursor.fetchone()
    cursor.close()
    conn.close()
    return task




def get_product_for_task(task):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM categories WHERE name = %s", (task['category'],))
    cat = cursor.fetchone()
    if not cat:
        conn.close()
        return None
    cat_id = cat['id']
    if task['subcategory'] is None:
        cursor.execute("""
            SELECT * FROM parsed_data 
            WHERE category_id = %s 
            ORDER BY RAND() LIMIT 1
        """, (cat_id,))
    else:
        cursor.execute("""
            SELECT id FROM subcategories 
            WHERE name = %s AND category_id = %s
        """, (task['subcategory'], cat_id))
        subcat = cursor.fetchone()
        if not subcat:
            conn.close()
            return None
        subcat_id = subcat['id']
        cursor.execute("""
            SELECT * FROM parsed_data 
            WHERE category_id = %s AND subcategory_id = %s 
            ORDER BY RAND() LIMIT 1
        """, (cat_id, subcat_id))
    product = cursor.fetchone()
    cursor.close()
    conn.close()
    return product


async def download_and_send_image(image_url, chat_id, context):
    try:
        response = requests.get(image_url)
        response.raise_for_status()
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            temp_file.write(response.content)
            temp_file.close()
            with open(temp_file.name, 'rb') as img_file:
                await context.bot.send_photo(chat_id=chat_id, photo=img_file)
            os.remove(temp_file.name)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


async def welcome_new_member(update: Update, context: CallbackContext):
    chat_id = update.message.chat.id
    new_user = update.message.new_chat_members[0].first_name
    welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {new_user}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç!"
    try:
        await context.bot.send_message(chat_id=chat_id, text=welcome_message)
    except ChatMigrated as e:
        new_chat_id = e.migrate_to_chat_id
        await context.bot.send_message(chat_id=new_chat_id, text=welcome_message)


async def send_product_message(chat_id, context, message_text, image_url, emoji):
    message_text = f"{emoji * 3} {message_text}"
    if image_url and image_url != '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
        try:
            response = requests.get(image_url)
            response.raise_for_status()
            bio = io.BytesIO(response.content)
            bio.name = 'image.jpg'
            await context.bot.send_photo(chat_id=chat_id, photo=bio, caption=message_text)
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            await context.bot.send_message(chat_id=chat_id, text=message_text)
    else:
        await context.bot.send_message(chat_id=chat_id, text=message_text)


async def track_messages(update: Update, context: CallbackContext):
    global start_time_bot, is_bot_active, message_count

    if not is_bot_active:
        print("‚ö†Ô∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.")
        return

    if (time.time() - start_time_bot) < 3:
        print("üïí –ë–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    chat_id = update.message.chat.id
    user_name = update.message.from_user.first_name

    if update.message.from_user.is_bot:
        print(f"ü§ñ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ {user_name}.")
        return

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    if chat_id not in message_count:
        message_count[chat_id] = 0
    message_count[chat_id] += 1

    print(f"üì© {user_name} –Ω–∞–ø–∏—Å–∞–ª –≤ —á–∞—Ç–µ {chat_id}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count[chat_id]}")

    # –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å 3 —Å–æ–æ–±—â–µ–Ω–∏—è
    if message_count[chat_id] == 3:
        print("üöÄ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä!")

        task = get_active_task()
        print(f"üîç –ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}")

        if not task:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ selection_mode
        if 'selection_mode' not in task:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—è 'selection_mode' –≤ –∑–∞–¥–∞—á–µ.")
            await context.bot.send_message(chat_id=chat_id, text="–ó–∞–¥–∞—á–∞ –Ω–µ –∏–º–µ–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if task['selection_mode'] == "–ø–æ –ø–æ—Ä—è–¥–∫—É":
            product = get_product_for_task_order(task)
        else:
            product = get_product_for_task_random(task)

        print(f"üì¶ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {product}")

        if not product:
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data1 = product.get('title', '')
        data2 = product.get('description', '')
        data3 = product.get('image_url', '')
        data4 = product.get('link', '')
        emoji = task.get('emoji', '‚úÖ')

        message_parts = [data1, data2, data4]
        message_text = "\n\n".join(filter(None, message_parts))  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        image_url = data3 if data3 and data3 != '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' else None

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await send_product_message(chat_id, context, message_text, image_url, emoji)
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        message_count[chat_id] = 0


def get_product_for_task_order(task):
    category_id, subcategory_id = get_category_and_subcategory_ids(task['category'], task['subcategory'])

    conn = get_db_connection()
    cursor = conn.cursor()

    # –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ subcategory_id, –µ—Å–ª–∏ subcategory_id == None
    if subcategory_id is None:
        cursor.execute("SELECT * FROM parsed_data WHERE category_id = %s", (category_id,))
    else:
        cursor.execute("SELECT * FROM parsed_data WHERE category_id = %s AND subcategory_id = %s",
                       (category_id, subcategory_id))

    products = cursor.fetchall()

    if not products:
        conn.close()
        return None

    order_indexes = [p['order_index'] for p in products]
    if len(set(order_indexes)) == 1:
        chosen_product = min(products, key=lambda p: p['id'])
    else:
        chosen_product = min(products, key=lambda p: p['order_index'])

    new_order = chosen_product['order_index'] + 1

    cursor.execute("UPDATE parsed_data SET order_index = %s WHERE id = %s",
                   (new_order, chosen_product['id']))
    conn.commit()
    conn.close()

    return chosen_product



def get_category_and_subcategory_ids(category_name, subcategory_name):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º category_id –ø–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("SELECT id FROM categories WHERE name = %s", (category_name,))
    category = cursor.fetchone()
    if not category:
        conn.close()
        raise ValueError(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    if subcategory_name is None:
        return category['id'], None  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–µ—Ä–µ–¥–∞—ë–º None –≤–º–µ—Å—Ç–æ ID

    # –ü–æ–ª—É—á–∞–µ–º subcategory_id –ø–æ –∏–º–µ–Ω–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("""
        SELECT id FROM subcategories WHERE name = %s AND category_id = %s
    """, (subcategory_name, category['id']))
    subcategory = cursor.fetchone()
    conn.close()

    if not subcategory:
        raise ValueError(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è {subcategory_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}.")

    return category['id'], subcategory['id']


async def toggle_bot(update: Update, context: CallbackContext):
    global is_bot_active, message_count
    is_bot_active = not is_bot_active
    status = "–≤–∫–ª—é—á–µ–Ω" if is_bot_active else "–≤—ã–∫–ª—é—á–µ–Ω"
    await update.message.reply_text(f"–ë–æ—Ç —Ç–µ–ø–µ—Ä—å {status}.")
    message_count.clear()


def get_product_for_task_random(task):
    category_id, subcategory_id = get_category_and_subcategory_ids(task['category'], task['subcategory'])

    conn = get_db_connection()
    cursor = conn.cursor()

    if subcategory_id is None:
        cursor.execute("SELECT * FROM parsed_data WHERE category_id = %s ORDER BY status ASC, RAND() LIMIT 1",
                       (category_id,))
    else:
        cursor.execute("SELECT * FROM parsed_data WHERE category_id = %s AND subcategory_id = %s ORDER BY status ASC, RAND() LIMIT 1",
                       (category_id, subcategory_id))

    product = cursor.fetchone()

    if product:
        new_status = product['status'] + 1
        cursor.execute("UPDATE parsed_data SET status = %s WHERE id = %s",
                       (new_status, product['id']))
        conn.commit()

    conn.close()
    return product



async def scheduled_recipe(context: CallbackContext):
    task = get_active_task()
    if task:
        product = get_product_for_task(task)
        if product:
            title = product.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
            description = product.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            message_text = f"–¢–æ–≤–∞—Ä (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é):\n{title}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            image_url = product.get('image_url', None)
            emoji = task.get('emoji', '‚úÖ')
            await send_product_message(SCHEDULED_CHAT_ID, context, message_text, image_url, emoji)
        else:
            await context.bot.send_message(chat_id=SCHEDULED_CHAT_ID, text="–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")
    else:
        await context.bot.send_message(chat_id=SCHEDULED_CHAT_ID, text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
BOT_THREAD = None                   # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ –±–æ—Ç–∞
BOT_APPLICATION = None              # –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
BOT_LOOP = None                     # –°—Å—ã–ª–∫–∞ –Ω–∞ event loop –±–æ—Ç–∞

async def bot_main():
    if not is_token_valid(TOKEN):
        print("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        return
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    app.add_handler(MessageHandler(filters.TEXT, track_messages))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^/toggle_bot$'), toggle_bot))
    await app.run_polling()

def run_bot(token):
    global TOKEN
    TOKEN = token  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    if token in ("0", 0, "", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω"):
        print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        return
    try:
        asyncio.run(bot_main())
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞: {e}")





def start_telegram_bot_process(token):
    global BOT_PROCESS
    BOT_PROCESS = multiprocessing.Process(target=run_bot, args=(token,), daemon=True)
    BOT_PROCESS.start()






# ================= –ö–õ–ê–°–° TasksTab (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–¥–∞—á –¥–ª—è –±–æ—Ç–∞) =================

class TasksTab(ttk.Frame):
    def __init__(self, master, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.create_widgets()
        self.refresh_categories()
        self.refresh_tasks()

    def create_widgets(self):
        frame = ttk.Frame(self)
        frame.pack(fill="x", padx=10, pady=5)

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ttk.Label(frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=0, column=0, sticky="w")
        self.category_var = tk.StringVar()
        self.category_cb = ttk.Combobox(frame, textvariable=self.category_var, state="readonly")
        self.category_cb.grid(row=0, column=1, sticky="ew", padx=5)
        self.category_cb.bind("<<ComboboxSelected>>", self.refresh_subcategories)

        # –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ttk.Label(frame, text="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=1, column=0, sticky="w")
        self.subcategory_var = tk.StringVar()
        self.subcategory_cb = ttk.Combobox(frame, textvariable=self.subcategory_var, state="readonly")
        self.subcategory_cb.grid(row=1, column=1, sticky="ew", padx=5)

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞: —Ä–∞–Ω–¥–æ–º –∏–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        ttk.Label(frame, text="–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞:").grid(row=2, column=0, sticky="w")
        self.mode_var = tk.StringVar(value="—Ä–∞–Ω–¥–æ–º")
        self.mode_cb = ttk.Combobox(frame, textvariable=self.mode_var, state="readonly")
        self.mode_cb['values'] = ["—Ä–∞–Ω–¥–æ–º", "–ø–æ –ø–æ—Ä—è–¥–∫—É"]
        self.mode_cb.grid(row=2, column=1, sticky="ew", padx=5)

        # –í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏
        ttk.Label(frame, text="–≠–º–æ–¥–∑–∏:").grid(row=3, column=0, sticky="w")
        self.emoji_var = tk.StringVar(value="‚úÖ")
        self.emoji_cb = ttk.Combobox(frame, textvariable=self.emoji_var, state="readonly")
        self.emoji_cb['values'] = ["‚úÖ", "üî•", "üåü", "üçï", "üéÅ", "üí•", "üíé", "‚ö°", "üì¶", "üì£", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥..."]
        self.emoji_cb.grid(row=3, column=1, sticky="ew", padx=5)
        self.emoji_cb.bind("<<ComboboxSelected>>", self.emoji_selection)

        self.custom_emoji_var = tk.StringVar()
        self.custom_emoji_entry = ttk.Entry(frame, textvariable=self.custom_emoji_var)
        self.custom_emoji_entry.grid(row=4, column=1, sticky="ew", padx=5)
        self.custom_emoji_entry.grid_remove()

        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        ttk.Label(frame, text="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú):").grid(row=5, column=0, sticky="w")
        self.start_time_var = tk.StringVar(value="08:00")
        ttk.Entry(frame, textvariable=self.start_time_var, width=10).grid(row=5, column=1, sticky="w", padx=5)

        # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        ttk.Label(frame, text="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ß–ß:–ú–ú):").grid(row=6, column=0, sticky="w")
        self.end_time_var = tk.StringVar(value="12:00")
        ttk.Entry(frame, textvariable=self.end_time_var, width=10).grid(row=6, column=1, sticky="w", padx=5)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        ttk.Button(self, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", command=self.add_task).pack(pady=5)

        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        ttk.Label(self, text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:").pack(anchor="w", padx=10, pady=(10, 0))
        frame_tasks_list = ttk.Frame(self)
        frame_tasks_list.pack(fill="both", expand=True, padx=10, pady=5)

        # –°–æ–∑–¥–∞—ë–º Listbox –¥–ª—è –∑–∞–¥–∞—á
        self.tasks_listbox = tk.Listbox(frame_tasks_list, height=8)
        self.tasks_listbox.pack(side="left", fill="both", expand=True)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        tasks_scrollbar = ttk.Scrollbar(frame_tasks_list, orient="vertical", command=self.tasks_listbox.yview)
        tasks_scrollbar.pack(side="right", fill="y")
        self.tasks_listbox.config(yscrollcommand=tasks_scrollbar.set)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        ttk.Button(self, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É", command=self.delete_task).pack(pady=5)

    def refresh_categories(self):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM categories")
        categories = [row['name'] for row in cursor.fetchall()]
        conn.close()
        self.category_cb['values'] = categories
        if categories:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
            self.category_var.set(categories[0])
            self.refresh_subcategories()
        else:
            self.category_var.set('')
            self.subcategory_cb['values'] = []
            self.subcategory_var.set('')

    def refresh_subcategories(self, event=None):
        category = self.category_var.get()
        if not category:
            self.subcategory_cb['values'] = []
            self.subcategory_var.set('')
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT s.name FROM subcategories s
            JOIN categories c ON s.category_id = c.id
            WHERE c.name = %s
        """, (category,))
        subcategories = [row['name'] for row in cursor.fetchall()]
        conn.close()
        subcategories.insert(0, "–í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        self.subcategory_cb['values'] = subcategories
        self.subcategory_var.set("–í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    def emoji_selection(self, event):
        if self.emoji_var.get() == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥...":
            self.custom_emoji_entry.grid()
        else:
            self.custom_emoji_entry.grid_remove()

    def add_task(self):
        category = self.category_var.get()
        subcategory = self.subcategory_var.get()
        selection_mode = self.mode_var.get()
        emoji_choice = self.emoji_var.get()
        start_time = self.start_time_var.get()
        end_time = self.end_time_var.get()

        if emoji_choice == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥...":
            emoji_input = self.custom_emoji_var.get().strip()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —ç–º–æ–¥–∑–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∞–ª–∏–∞—Å—ã.
            converted = emoji.emojize(emoji_input, language='alias')
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–Ω–∞—á–∏—Ç, –∞–ª–∏–∞—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
            if converted == emoji_input:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —ç–º–æ–¥–∑–∏.")
                return
            emoji_final = converted
        else:
            emoji_final = emoji_choice
        print(f"selection_mode: {selection_mode}")  # –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        if subcategory == "–í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            subcategory = None

        try:
            datetime.datetime.strptime(start_time, "%H:%M")
            datetime.datetime.strptime(end_time, "%H:%M")
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO bot_tasks (category, subcategory, start_time, end_time, emoji, selection_mode)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (category, subcategory, start_time, end_time, emoji_final, selection_mode))
        conn.commit()
        conn.close()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        self.refresh_tasks()

    def refresh_tasks(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∑–∞–≥—Ä—É–∂–∞—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã."""
        self.tasks_listbox.delete(0, tk.END)  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

        conn = get_db_connection()
        cursor = conn.cursor()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã
        cursor.execute(
            "SELECT id, category, subcategory, start_time, end_time, emoji, selection_mode FROM bot_tasks ORDER BY id ASC")
        tasks = cursor.fetchall()

        valid_tasks = []
        for row in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (–µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞)
            if row['subcategory']:
                cursor.execute("SELECT COUNT(*) as cnt FROM subcategories WHERE name = %s", (row['subcategory'],))
                res = cursor.fetchone()
                if res['cnt'] == 0:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
            valid_tasks.append(row)

        conn.close()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫
        for row in valid_tasks:
            subcat_display = row['subcategory'] if row['subcategory'] else "–í—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            task_str = (f"{row['id']}: {row['emoji']} {row['category']} - {subcat_display} "
                        f"({row['start_time']} - {row['end_time']}) —Ä–µ–∂–∏–º: {row.get('selection_mode', '—Ä–∞–Ω–¥–æ–º')}")
            self.tasks_listbox.insert(tk.END, task_str)

    def delete_task(self):
        selection = self.tasks_listbox.curselection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        task_str = self.tasks_listbox.get(selection[0])
        try:
            task_id = task_str.split(":")[0].strip()
        except Exception:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á–∏.")
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM bot_tasks WHERE id = %s", (task_id,))
        conn.commit()
        conn.close()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
        self.refresh_tasks()












def save_parsed_data_worker(cat_name, subcat_name, parsed_data):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT id FROM categories WHERE name = %s", (cat_name,))
        cat_row = cursor.fetchone()
        if not cat_row:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        cat_id = cat_row['id']

        cursor.execute("SELECT id FROM subcategories WHERE name = %s AND category_id = %s", (subcat_name, cat_id))
        subcat_row = cursor.fetchone()
        if not subcat_row:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcat_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        subcat_id = subcat_row['id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if not parsed_data:
            print("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS parsed_data (
                id INT AUTO_INCREMENT PRIMARY KEY,
                category_id INT,
                subcategory_id INT,
                title VARCHAR(255),
                description TEXT,
                image_url TEXT,
                link TEXT,
                sub_description TEXT,
                `current_date` DATETIME,
                status INT DEFAULT 0,
                order_index INT DEFAULT 0
            )
        """)

        insert_sql = """
            INSERT INTO parsed_data 
            (category_id, subcategory_id, title, description, image_url, link, sub_description, `current_date`, status, order_index)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """

        inserted_count = 0
        for row in parsed_data:
            cursor.execute(insert_sql, (
                cat_id,
                subcat_id,
                row.get('data1', ''),
                row.get('data2', ''),
                row.get('data3', ''),
                row.get('data4', ''),
                row.get('sub_description', ''),
                row.get('current_date', datetime.datetime.now()),
                0,
                0
            ))
            inserted_count += 1

        conn.commit()  # ‚úÖ –î–æ–±–∞–≤–∏–ª –∫–æ–º–º–∏—Ç, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {inserted_count} –∑–∞–ø–∏—Å–µ–π.")

    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É: {e}"
    finally:
        conn.close()

    return f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {inserted_count} –∑–∞–ø–∏—Å–µ–π."


# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–æ–¥—É–ª–∏)
DATA_FILE = "data.json"
data = {"categories": []}

def load_data():
    global data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {"categories": []}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


class CategoriesTab(ttk.Frame):
    def __init__(self, master, modules_tab, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.modules_tab = modules_tab  # –°—Å—ã–ª–∫–∞ –Ω–∞ ModulesTab
        self.update_callback = None
        self.create_widgets()
        self.selected_category = None
        self.selected_subcategory = None
        self.refresh_categories()

    def refresh_subcategories(self):
        if not self.selected_category:
            self.subcat_listbox.delete(0, tk.END)
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM subcategories WHERE category_id = (SELECT id FROM categories WHERE name = %s)",
                       (self.selected_category,))
        subcategories = cursor.fetchall()
        conn.close()
        self.subcat_listbox.delete(0, tk.END)
        for sub in subcategories:
            self.subcat_listbox.insert(tk.END, sub["name"])

    def set_update_callback(self, callback):
        self.update_callback = callback

    def create_widgets(self):
        frame_add_cat = ttk.Frame(self)
        frame_add_cat.pack(fill='x', pady=5)
        self.cat_name_var = tk.StringVar()
        ttk.Label(frame_add_cat, text="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:").pack(side='left')
        ttk.Entry(frame_add_cat, textvariable=self.cat_name_var).pack(side='left', fill='x', expand=True, padx=5)
        ttk.Button(frame_add_cat, text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", command=self.add_category).pack(side='left')

        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        frame_cat_list = ttk.Frame(self)
        frame_cat_list.pack(fill="both", expand=True, pady=5)

        # –°–æ–∑–¥–∞—ë–º Listbox –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.cat_listbox = tk.Listbox(frame_cat_list, height=8)
        self.cat_listbox.pack(side="left", fill="both", expand=True)
        self.cat_listbox.bind("<<ListboxSelect>>", self.on_category_select)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cat_scrollbar = ttk.Scrollbar(frame_cat_list, orient="vertical", command=self.cat_listbox.yview)
        cat_scrollbar.pack(side="right", fill="y")
        self.cat_listbox.config(yscrollcommand=cat_scrollbar.set)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ttk.Button(self, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", command=self.delete_category).pack(pady=2)

        frame_add_subcat = ttk.Frame(self)
        frame_add_subcat.pack(fill='x', pady=5)
        self.subcat_var = tk.StringVar()
        ttk.Label(frame_add_subcat, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:").pack(side='left')
        ttk.Entry(frame_add_subcat, textvariable=self.subcat_var).pack(side='left', fill='x', expand=True, padx=5)
        ttk.Button(frame_add_subcat, text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", command=self.add_subcategory).pack(side='left')

        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        frame_subcat_list = ttk.Frame(self)
        frame_subcat_list.pack(fill="both", expand=True, pady=5)

        # –°–æ–∑–¥–∞—ë–º Listbox –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.subcat_listbox = tk.Listbox(frame_subcat_list, height=5)
        self.subcat_listbox.pack(side="left", fill="both", expand=True)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        subcat_scrollbar = ttk.Scrollbar(frame_subcat_list, orient="vertical", command=self.subcat_listbox.yview)
        subcat_scrollbar.pack(side="right", fill="y")
        self.subcat_listbox.config(yscrollcommand=subcat_scrollbar.set)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ttk.Button(self, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", command=self.delete_subcategory).pack(pady=2)

    def add_subcategory(self):
        category_selection = self.cat_listbox.curselection()
        if not category_selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return
        category_name = self.cat_listbox.get(category_selection[0])
        sub_name = self.subcat_var.get().strip()
        if sub_name:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(
                "SELECT * FROM subcategories WHERE name = %s AND category_id = (SELECT id FROM categories WHERE name = %s)",
                (sub_name, category_name))
            existing_subcategory = cursor.fetchone()
            if existing_subcategory:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–∞–∫–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                conn.close()
                return
            cursor.execute(
                "INSERT INTO subcategories (name, category_id) VALUES (%s, (SELECT id FROM categories WHERE name = %s))",
                (sub_name, category_name))
            conn.commit()
            conn.close()
            self.subcat_var.set("")
            self.on_category_select(None)
            messagebox.showinfo("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ", f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{sub_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            if self.update_callback:
                self.update_callback()

    def refresh_categories(self):
        self.cat_listbox.delete(0, tk.END)
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM categories")
        categories = cursor.fetchall()
        conn.close()
        for cat in categories:
            self.cat_listbox.insert(tk.END, cat["name"])
        self.subcat_listbox.delete(0, tk.END)

    def add_category(self):
        name = self.cat_name_var.get().strip()
        if not name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM categories WHERE name = %s", (name,))
        if cursor.fetchone():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            conn.close()
            return
        cursor.execute("INSERT INTO categories (name) VALUES (%s)", (name,))
        conn.commit()
        conn.close()
        self.cat_name_var.set("")
        self.refresh_categories()
        if self.update_callback:
            self.update_callback()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    def delete_category(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        if self.modules_tab.current_process is not None and self.modules_tab.current_process.is_alive():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–¥—É–ª—å!")
            return

        selection = self.cat_listbox.curselection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        category_name = self.cat_listbox.get(selection[0])

        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'?")
        if not confirm:
            return

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT id FROM categories WHERE name = %s", (category_name,))
        category = cursor.fetchone()
        if not category:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            conn.close()
            return

        category_id = category['id']

        cursor.execute("DELETE FROM modules WHERE category_id = %s", (category_id,))
        cursor.execute("DELETE FROM subcategories WHERE category_id = %s", (category_id,))
        cursor.execute("DELETE FROM categories WHERE id = %s", (category_id,))

        conn.commit()
        conn.close()

        self.refresh_categories()
        messagebox.showinfo("–£–¥–∞–ª–µ–Ω–∏–µ", f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–¥–∞–ª–µ–Ω–∞.")

    def on_category_select(self, event):
        selection = self.cat_listbox.curselection()
        if selection:
            index = selection[0]
            category_name = self.cat_listbox.get(index)
            self.selected_category = category_name
            self.refresh_subcategories()

    def delete_subcategory(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        if self.modules_tab.current_process is not None and self.modules_tab.current_process.is_alive():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–¥—É–ª—å!")
            return

        sub_selection = self.subcat_listbox.curselection()
        if not sub_selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        sub_name = self.subcat_listbox.get(sub_selection[0])
        if not self.selected_category:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("""
            SELECT id FROM subcategories 
            WHERE name = %s AND category_id = (SELECT id FROM categories WHERE name = %s)
        """, (sub_name, self.selected_category))

        subcat = cursor.fetchone()
        if not subcat:
            conn.close()
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{sub_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        subcat_id = subcat['id']

        cursor.execute("DELETE FROM modules WHERE subcategory_id = %s", (subcat_id,))
        cursor.execute("DELETE FROM subcategories WHERE id = %s", (subcat_id,))

        conn.commit()
        conn.close()

        self.refresh_subcategories()
        messagebox.showinfo("–£–¥–∞–ª–µ–Ω–∏–µ", f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{sub_name}' —É–¥–∞–ª–µ–Ω–∞.")


def run_module_worker(q, file_path, cat_name, subcat_name, use_subprocess=True):
    output_capture = io.StringIO()
    with contextlib.redirect_stdout(output_capture):
        try:
            if use_subprocess:
                result = subprocess.run(
                    [sys.executable, file_path],
                    capture_output=True,
                    text=True,
                    encoding="utf-8",
                    errors="replace"
                )
                output_capture.write(result.stdout)
                print('–ü—Ä–æ–≤–µ—Ä–∫–∞')
            else:
                spec = importlib.util.spec_from_file_location("dynamic_module", file_path)
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)

                # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                parsed_data = None
                if hasattr(module, "parsing"):
                    parsed_data = module.parsing()
                elif hasattr(module, "data"):
                    parsed_data = module.data

                if parsed_data is None:
                    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã 'data' –∏–ª–∏ 'parsing()' –≤ –º–æ–¥—É–ª–µ.")
                else:
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã: {len(parsed_data)} –∑–∞–ø–∏—Å–µ–π")
                    result = save_parsed_data_worker(cat_name, subcat_name, parsed_data)
                    print(f"üì• –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–¥—É–ª—è: {e}")

    q.put(output_capture.getvalue())

class ModulesTab(ttk.Frame):
    def __init__(self, master, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.current_process = None
        self.active_module_name = None  # –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        self.scheduled_tasks = {}       # –•—Ä–∞–Ω–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
        self.create_widgets()
        self.refresh_category_dropdown()
        self.refresh_modules_list()
        self.schedule_all_modules()     # –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    def dynamic_import(self, module_name):
        try:
            return importlib.import_module(module_name)
        except ImportError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—à–∏–±–∫–∞: {e}")
            return None

    def schedule_all_modules(self):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name, start_time FROM modules WHERE start_time IS NOT NULL")
        for row in cursor.fetchall():
            self.schedule_module(row['name'], row['start_time'])
        conn.close()

    def set_update_callback(self, callback):
        self.update_callback = callback

    def create_widgets(self):
        frame_add_module = ttk.Frame(self)
        frame_add_module.pack(fill='x', pady=5)

        ttk.Label(frame_add_module, text="–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:").grid(row=0, column=0, sticky="w")
        self.module_name_var = tk.StringVar()
        ttk.Entry(frame_add_module, textvariable=self.module_name_var).grid(row=0, column=1, sticky="ew", padx=5)

        ttk.Label(frame_add_module, text="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:").grid(row=1, column=0, sticky="w")
        self.module_path_var = tk.StringVar()
        ttk.Entry(frame_add_module, textvariable=self.module_path_var).grid(row=1, column=1, sticky="ew", padx=5)
        ttk.Button(frame_add_module, text="–û–±–∑–æ—Ä", command=self.browse_file).grid(row=1, column=2, padx=5)

        ttk.Label(frame_add_module, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=2, column=0, sticky="w")
        self.selected_category_var = tk.StringVar()
        self.category_dropdown = ttk.Combobox(frame_add_module, textvariable=self.selected_category_var, state="readonly")
        self.category_dropdown.grid(row=2, column=1, sticky="ew", padx=5)
        self.category_dropdown.bind("<<ComboboxSelected>>", self.update_subcategory_dropdown)

        ttk.Label(frame_add_module, text="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=3, column=0, sticky="w")
        self.selected_subcategory_var = tk.StringVar()
        self.subcategory_dropdown = ttk.Combobox(frame_add_module, textvariable=self.selected_subcategory_var, state="readonly")
        self.subcategory_dropdown.grid(row=3, column=1, sticky="ew", padx=5)

        ttk.Label(frame_add_module, text="–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–ß–ß:–ú–ú, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):").grid(row=4, column=0, sticky="w")
        self.start_time_var = tk.StringVar()
        ttk.Entry(frame_add_module, textvariable=self.start_time_var).grid(row=4, column=1, sticky="ew", padx=5)

        frame_add_module.columnconfigure(1, weight=1)
        ttk.Button(frame_add_module, text="–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å", command=self.add_module).grid(row=5, column=0, columnspan=3, pady=5)

        ttk.Label(self, text="–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:").pack(anchor="w", padx=5)
        frame_modules_list = ttk.Frame(self)
        frame_modules_list.pack(fill="both", expand=True, padx=5, pady=5)

        self.modules_listbox = tk.Listbox(frame_modules_list, height=8)
        self.modules_listbox.pack(side="left", fill="both", expand=True)
        self.modules_listbox.bind("<<ListboxSelect>>", self.on_module_select)

        modules_scrollbar = ttk.Scrollbar(frame_modules_list, orient="vertical", command=self.modules_listbox.yview)
        modules_scrollbar.pack(side="right", fill="y")
        self.modules_listbox.config(yscrollcommand=modules_scrollbar.set)

        button_frame = ttk.Frame(self)
        button_frame.pack(fill='x', pady=5)
        ttk.Button(button_frame, text="–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å", command=self.delete_selected_module).pack(side="left", padx=5)
        self.run_button = ttk.Button(button_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å", command=self.run_selected_module)
        self.run_button.pack(side="left", padx=5)
        self.stop_button = ttk.Button(button_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å", command=self.stop_selected_module)
        self.stop_button.pack(side="left", padx=5)

        console_frame = ttk.Frame(self)
        console_frame.pack(fill="both", expand=True, padx=5, pady=5)
        self.output_text = tk.Text(console_frame, height=10, state='disabled', bg="black", fg="lime", wrap="word")
        self.output_text.pack(side="left", fill="both", expand=True)
        scrollbar = ttk.Scrollbar(console_frame, orient="vertical", command=self.output_text.yview)
        scrollbar.pack(side="right", fill="y")
        self.output_text.config(yscrollcommand=scrollbar.set)

    def display_output(self, text):
        self.output_text.configure(state='normal')
        self.output_text.delete(1.0, tk.END)
        self.output_text.insert(tk.END, text)
        self.output_text.configure(state='disabled')

    def on_module_select(self, event):
        selection = self.modules_listbox.curselection()
        if selection:
            index = selection[0]
            conn = self.get_db_connection()
            cursor = conn.cursor()
            query = """
                SELECT m.id, m.name as module_name, m.file_path, c.name as category, s.name as subcategory
                FROM modules m
                JOIN categories c ON m.category_id = c.id
                JOIN subcategories s ON m.subcategory_id = s.id
                ORDER BY m.id
            """
            cursor.execute(query)
            modules = cursor.fetchall()
            conn.close()
            if index < len(modules):
                module = modules[index]
                self.display_output(f"–í—ã–±—Ä–∞–Ω –º–æ–¥—É–ª—å:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {module['module_name']}\n"
                                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {module['category']}\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {module['subcategory']}\n"
                                    f"–ü—É—Ç—å: {module['file_path']}\n")
                # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω, –∫–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ
                if self.current_process is not None:
                    if module['module_name'] == self.active_module_name:
                        self.run_button.config(state="disabled")
                        self.stop_button.config(state="normal")
                    else:
                        self.run_button.config(state="disabled")
                        self.stop_button.config(state="disabled")
                else:
                    self.run_button.config(state="normal")
                    self.stop_button.config(state="disabled")

    def add_module(self):
        module_name = self.module_name_var.get().strip()
        module_path = self.module_path_var.get().strip()
        category_name = self.selected_category_var.get().strip()
        subcategory_name = self.selected_subcategory_var.get().strip()
        start_time = self.start_time_var.get().strip() or None

        if not module_name or not module_path or not category_name or not subcategory_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
            return

        if start_time:
            try:
                datetime.datetime.strptime(start_time, "%H:%M")
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú")
                return

        conn = self.get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–æ–¥—É–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        cursor.execute("SELECT COUNT(*) FROM modules WHERE name = %s", (module_name,))
        existing_module = cursor.fetchone()
        if existing_module and existing_module["COUNT(*)"] > 0:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ú–æ–¥—É–ª—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{module_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            conn.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º category_id –∏ subcategory_id
        cursor.execute("SELECT id FROM categories WHERE name=%s", (category_name,))
        category_row = cursor.fetchone()
        if not category_row:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            conn.close()
            return
        category_id = category_row['id']

        cursor.execute("SELECT id FROM subcategories WHERE name=%s AND category_id=%s", (subcategory_name, category_id))
        subcategory_row = cursor.fetchone()
        if not subcategory_row:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{subcategory_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            conn.close()
            return
        subcategory_id = subcategory_row['id']

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
        cursor.execute("""
            INSERT INTO modules (name, file_path, category_id, subcategory_id, start_time) 
            VALUES (%s, %s, %s, %s, %s)
        """, (module_name, module_path, category_id, subcategory_id, start_time))
        conn.commit()
        conn.close()

        self.refresh_modules_list()
        self.schedule_module(module_name, start_time)
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        self.refresh_modules_list()
        self.refresh_category_dropdown()

    def run_module_by_name(self, module_name):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        query = """
            SELECT m.name as module_name, m.file_path, c.name as category, s.name as subcategory, m.start_time 
            FROM modules m
            JOIN categories c ON m.category_id = c.id
            JOIN subcategories s ON m.subcategory_id = s.id
            WHERE m.name = %s
        """
        cursor.execute(query, (module_name,))
        module = cursor.fetchone()
        conn.close()

        if module:
            self.start_process(module['file_path'], module['category'], module['subcategory'], module['module_name'])
            if module.get('start_time'):
                self.schedule_module(module_name, module['start_time'])

    def schedule_module(self, module_name, start_time):
        if not start_time:
            return

        if self.current_process is not None and self.current_process.is_alive():
            print(
                f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å '{module_name}' –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è '{self.active_module_name}'")
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

        now = datetime.datetime.now()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ start_time
        if isinstance(start_time, str):
            run_time = datetime.datetime.strptime(start_time, "%H:%M").time()
        elif isinstance(start_time, datetime.time):
            run_time = start_time
        elif isinstance(start_time, datetime.timedelta):
            run_time = (now + start_time).time()
        else:
            print(f"–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø start_time ({type(start_time)}) –¥–ª—è –º–æ–¥—É–ª—è {module_name}")
            return

        run_datetime = datetime.datetime.combine(now.date(), run_time)
        if run_datetime < now:
            run_datetime += datetime.timedelta(days=1)
        delay = (run_datetime - now).total_seconds()

        timer = threading.Timer(delay, self.run_module_by_name, args=(module_name,))
        timer.start()
        self.scheduled_tasks[module_name] = timer

    def delete_selected_module(self):
        selection = self.modules_listbox.curselection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        index = selection[0]
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM modules ORDER BY id")
        modules = cursor.fetchall()
        conn.close()

        if index < len(modules):
            module_id = modules[index]['id']
            module_name = modules[index]['name']

            if self.active_module_name == module_name:
                if self.current_process is not None and self.current_process.is_alive():
                    self.current_process.terminate()
                    self.current_process.join(timeout=2)
                    self.current_process = None
                    self.active_module_name = None
                    self.refresh_modules_list()
                    self.run_button.config(state="normal")
                    self.stop_button.config(state="disabled")

            confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å?")
            if confirm:
                conn = self.get_db_connection()
                cursor = conn.cursor()
                cursor.execute("DELETE FROM modules WHERE id = %s", (module_id,))
                conn.commit()
                conn.close()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
                self.refresh_modules_list()

    def run_selected_module(self):
        if self.current_process is not None and self.current_process.is_alive():
            messagebox.showerror("–û—à–∏–±–∫–∞",
                                 f"–ú–æ–¥—É–ª—å '{self.active_module_name}' —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥—Ä—É–≥–æ–≥–æ.")
            return

        selection = self.modules_listbox.curselection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å.")
            return

        index = selection[0]
        conn = self.get_db_connection()
        cursor = conn.cursor()
        query = """
           SELECT m.name as module_name, m.file_path, c.name as category, s.name as subcategory
           FROM modules m
           JOIN categories c ON m.category_id = c.id
           JOIN subcategories s ON m.subcategory_id = s.id
           ORDER BY m.id
        """
        cursor.execute(query)
        modules = cursor.fetchall()
        conn.close()

        if index < len(modules):
            module_record = modules[index]
            self.start_process(module_record['file_path'], module_record['category'], module_record['subcategory'],
                               module_record['module_name'])

    def start_process(self, file_path, cat_name, subcat_name, module_name, use_subprocess=False):
        if self.current_process is not None and self.current_process.is_alive():
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å '{module_name}', —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è '{self.active_module_name}'")
            return

        q = multiprocessing.Queue()
        self.active_module_name = module_name
        self.current_process = multiprocessing.Process(target=run_module_worker,
                                                       args=(q, file_path, cat_name, subcat_name, use_subprocess))
        self.current_process.start()
        self.refresh_modules_list()

        def check_output():
            if not q.empty():
                output = q.get()
                self.display_output(output)
                self.current_process = None
                self.active_module_name = None
                self.refresh_modules_list()
                self.run_button.config(state="normal")
                self.stop_button.config(state="disabled")
            else:
                if self.current_process is not None and self.current_process.is_alive():
                    self.after(100, check_output)
                else:
                    self.run_button.config(state="normal")
                    self.stop_button.config(state="disabled")
                    self.current_process = None
                    self.active_module_name = None
                    self.refresh_modules_list()

        check_output()

    def browse_file(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–æ–¥—É–ª—è",
            filetypes=[("Python files", "*.py"), ("All files", "*.*")]
        )
        if file_path:
            self.module_path_var.set(file_path)

    def update_subcategory_dropdown(self, event=None):
        category = self.selected_category_var.get()
        if not category:
            self.subcategory_dropdown['values'] = []
            self.selected_subcategory_var.set('')
            return
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM categories WHERE name = %s", (category,))
        cat_row = cursor.fetchone()
        if not cat_row:
            self.subcategory_dropdown['values'] = []
            self.selected_subcategory_var.set('')
            conn.close()
            return
        cat_id = cat_row['id']
        cursor.execute("SELECT name FROM subcategories WHERE category_id = %s", (cat_id,))
        subcategories = [row['name'] for row in cursor.fetchall()]
        conn.close()
        self.subcategory_dropdown['values'] = subcategories
        if subcategories:
            self.selected_subcategory_var.set(subcategories[0])
        else:
            self.selected_subcategory_var.set('')

    def refresh_category_dropdown(self):
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM categories")
        categories = [row['name'] for row in cursor.fetchall()]
        conn.close()
        self.category_dropdown['values'] = categories
        if categories:
            self.selected_category_var.set(categories[0])
        else:
            self.selected_category_var.set('')
        self.update_subcategory_dropdown()

    def refresh_modules_list(self):
        self.modules_listbox.delete(0, tk.END)
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name, start_time FROM modules")
        for module in cursor.fetchall():
            display_text = module['name']
            if self.active_module_name and module['name'] == self.active_module_name:
                display_text += " [–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è]"
            if module['start_time']:
                display_text += f" ({module['start_time']})"
            self.modules_listbox.insert(tk.END, display_text)
        conn.close()

    def stop_selected_module(self):
        selection = self.modules_listbox.curselection()
        if not selection:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return
        index = selection[0]
        conn = self.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM modules ORDER BY id")
        modules = cursor.fetchall()
        conn.close()
        if index < len(modules):
            selected_module_name = modules[index]['name']
            if self.current_process is None or selected_module_name != self.active_module_name:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
                return
            self.current_process.terminate()
            self.current_process.join(timeout=2)
            if self.current_process.is_alive():
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
            else:
                print("–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            self.current_process = None
            self.active_module_name = None
            self.refresh_modules_list()
            self.run_button.config(state="normal")
            self.stop_button.config(state="disabled")

    def get_db_connection(self):
        global is_db_working
        try:
            config = load_db_config()
            test = pymysql.connect(
                host=config.get("host", "localhost"),
                user=config.get("user", "root"),
                password=config.get("password", ""),
                db=config.get("db", "test"),
                charset="utf8mb4",
                cursorclass=pymysql.cursors.DictCursor
            )
            is_db_working = 1
            return pymysql.connect(
                host=config.get("host", "localhost"),
                user=config.get("user", "root"),
                password=config.get("password", ""),
                db=config.get("db", "test"),
                charset="utf8mb4",
                cursorclass=pymysql.cursors.DictCursor
            )
        except:
            is_db_working = 0
            return pymysql.connect(
                host='ilyasiux.beget.tech',
                user='ilyasiux_prop',
                password='Propeller187',
                db='ilyasiux_prop',
                charset="utf8mb4",
                cursorclass=pymysql.cursors.DictCursor
            )




class DatabaseSettingsTab(ttk.Frame):
    def __init__(self, master, on_success_callback=None, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.on_success_callback = on_success_callback
        self.create_widgets()
        self.load_db_settings()

    def create_widgets(self):
        ttk.Label(self, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", font=("Arial", 14)).pack(pady=10)

        self.db_params = {}
        fields = ["host", "user", "password", "db"]

        for field in fields:
            ttk.Label(self, text=f"{field.capitalize()}: ").pack(pady=5)
            var = tk.StringVar()
            entry = ttk.Entry(self, textvariable=var, width=50)
            entry.pack(pady=5)
            add_context_menu(entry)
            self.db_params[field] = var

        ttk.Button(self, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_db_settings).pack(pady=10)

        if is_db_working == 0:
            ttk.Label(self, text="–í–Ω–∏–º–∞–Ω–∏–µ!", font=("Arial", 12)).pack(pady=10)
            ttk.Label(self, text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ. –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.", font=("Arial", 10)).pack(pady=10)

    def load_db_settings(self):
        global DB_CONFIG
        if not DB_CONFIG and os.path.exists("db_config.json"):
            with open("db_config.json", "r", encoding="utf-8") as f:
                config = json.load(f)
            DB_CONFIG.update(config)  # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for key, var in self.db_params.items():
            var.set(DB_CONFIG.get(key, ""))

    def save_db_settings(self):
        config = {key: var.get() for key, var in self.db_params.items()}
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            conn = pymysql.connect(
                host=config["host"],
                user=config["user"],
                password=config["password"],
                db=config["db"],
                charset="utf8mb4",
                connect_timeout=3,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 3 —Å–µ–∫—É–Ω–¥—ã
                cursorclass=pymysql.cursors.DictCursor
            )
            conn.close()
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–≤–µ—Ä–Ω—ã:\n{e}")
            return

        # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        with open("db_config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=4)
        global DB_CONFIG
        DB_CONFIG.clear()
        DB_CONFIG.update(config)

        if self.on_success_callback:
            self.on_success_callback()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")


class DBAuthWindow(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        self.geometry("400x250")
        self.resizable(False, False)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º DB_CONFIG –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–∫–Ω–∞
        global DB_CONFIG
        if not DB_CONFIG:  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç
            DB_CONFIG = load_db_config()
        self.create_widgets()

    def create_widgets(self):
        frame = ttk.Frame(self)
        frame.pack(padx=20, pady=20, fill="both", expand=True)

        ttk.Label(frame, text="Host:").grid(row=0, column=0, sticky="w", pady=5)
        self.host_var = tk.StringVar(value=DB_CONFIG.get("host", "localhost"))
        host_entry = ttk.Entry(frame, textvariable=self.host_var)
        host_entry.grid(row=0, column=1, pady=5)
        add_context_menu(host_entry)

        ttk.Label(frame, text="User:").grid(row=1, column=0, sticky="w", pady=5)
        self.user_var = tk.StringVar(value=DB_CONFIG.get("user", "Anos"))
        user_entry = ttk.Entry(frame, textvariable=self.user_var)
        user_entry.grid(row=1, column=1, pady=5)
        add_context_menu(user_entry)

        ttk.Label(frame, text="Password:").grid(row=2, column=0, sticky="w", pady=5)
        self.password_var = tk.StringVar(value=DB_CONFIG.get("password", "AnosVoldigod0"))
        password_entry = ttk.Entry(frame, textvariable=self.password_var, show="*")
        password_entry.grid(row=2, column=1, pady=5)
        add_context_menu(password_entry)

        ttk.Label(frame, text="Database:").grid(row=3, column=0, sticky="w", pady=5)
        self.db_var = tk.StringVar(value=DB_CONFIG.get("db", "test"))
        db_entry = ttk.Entry(frame, textvariable=self.db_var)
        db_entry.grid(row=3, column=1, pady=5)
        add_context_menu(db_entry)

        ttk.Button(frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", command=self.test_connection).grid(row=4, column=0, columnspan=2, pady=15)

    def test_connection(self):
        config = {
            "host": self.host_var.get().strip(),
            "user": self.user_var.get().strip(),
            "password": self.password_var.get().strip(),
            "db": self.db_var.get().strip()
        }
        try:
            conn = pymysql.connect(
                host=config["host"],
                user=config["user"],
                password=config["password"],
                db=config["db"],
                charset="utf8mb4",
                connect_timeout=3,
                cursorclass=pymysql.cursors.DictCursor
            )
            conn.close()

            create_tables()
            create_tasks_table()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DB_CONFIG
            global DB_CONFIG
            DB_CONFIG.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            DB_CONFIG.update(config)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            with open("db_config.json", "w", encoding="utf-8") as f:
                json.dump(DB_CONFIG, f, ensure_ascii=False, indent=4)

            print("–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π DB_CONFIG:", DB_CONFIG)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª—Å—è

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            self.destroy()
            app = App()
            app.mainloop()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n{e}")
            print(e)


class ParsedDataTab(ttk.Frame):
    def __init__(self, master, *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.create_widgets()
        self.load_categories()
        self.load_parsed_data()

    def create_widgets(self):
        # –§—Ä–µ–π–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        add_frame = ttk.LabelFrame(self, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ parsed_data")
        add_frame.pack(fill="x", padx=10, pady=5)

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ttk.Label(add_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
        self.category_var = tk.StringVar()
        self.category_cb = ttk.Combobox(add_frame, textvariable=self.category_var, state="readonly")
        self.category_cb.grid(row=0, column=1, sticky="ew", padx=5, pady=5)
        self.category_cb.bind("<<ComboboxSelected>>", self.load_subcategories)

        # –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ttk.Label(add_frame, text="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
        self.subcategory_var = tk.StringVar()
        self.subcategory_cb = ttk.Combobox(add_frame, textvariable=self.subcategory_var, state="readonly")
        self.subcategory_cb.grid(row=1, column=1, sticky="ew", padx=5, pady=5)

        # –ü–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
        ttk.Label(add_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
        self.title_entry = ttk.Entry(add_frame)
        self.title_entry.grid(row=2, column=1, sticky="ew", padx=5, pady=5)

        # –ü–æ–ª–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ)
        ttk.Label(add_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=3, column=0, sticky="nw", padx=5, pady=5)
        self.description_text = tk.Text(add_frame, height=4, wrap="word")
        self.description_text.grid(row=3, column=1, sticky="ew", padx=5, pady=5)

        # –ü–æ–ª–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
        ttk.Label(add_frame, text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É:").grid(row=4, column=0, sticky="w", padx=5, pady=5)
        self.image_url_entry = ttk.Entry(add_frame)
        self.image_url_entry.grid(row=4, column=1, sticky="ew", padx=5, pady=5)

        # –ü–æ–ª–µ –¥–ª—è —Å—Å—ã–ª–∫–∏
        ttk.Label(add_frame, text="–°—Å—ã–ª–∫–∞:").grid(row=5, column=0, sticky="w", padx=5, pady=5)
        self.link_entry = ttk.Entry(add_frame)
        self.link_entry.grid(row=5, column=1, sticky="ew", padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        self.add_button = ttk.Button(add_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", command=self.add_record)
        self.add_button.grid(row=6, column=0, columnspan=2, pady=10)
        add_frame.columnconfigure(1, weight=1)

        # –§—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        list_frame = ttk.LabelFrame(self, text="–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π parsed_data")
        list_frame.pack(fill="both", expand=True, padx=10, pady=5)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (Treeview)
        columns = ("id", "category", "subcategory", "title", "description", "image_url", "link", "current_date", "status", "order_index")
        self.tree = ttk.Treeview(list_frame, columns=columns, show="headings")
        for col in columns:
            self.tree.heading(col, text=col)
            if col in ("id", "status", "order_index"):
                self.tree.column(col, width=50, anchor="center")
            elif col in ("category", "subcategory"):
                self.tree.column(col, width=100)
            else:
                self.tree.column(col, width=150)
        self.tree.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        v_scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=v_scrollbar.set)
        v_scrollbar.grid(row=0, column=1, sticky="ns")

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–≤—Å–µ–≥–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–æ)
        h_scrollbar = ttk.Scrollbar(list_frame, orient="horizontal", command=self.tree.xview)
        self.tree.configure(xscrollcommand=h_scrollbar.set)
        h_scrollbar.grid(row=1, column=0, sticky="ew", padx=5)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –≤ list_frame: —Å—Ç—Ä–æ–∫–∞ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–ª–æ—Å–æ–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
        list_frame.rowconfigure(0, weight=1)
        list_frame.rowconfigure(1, minsize=20)
        list_frame.columnconfigure(0, weight=1)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏
        action_frame = ttk.Frame(self)
        action_frame.pack(fill="x", padx=10, pady=5)
        self.delete_button = ttk.Button(action_frame, text="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å", command=self.delete_selected)
        self.delete_button.pack(side="left", padx=5)
        self.delete_all_button = ttk.Button(action_frame, text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", command=self.delete_all)
        self.delete_all_button.pack(side="left", padx=5)
        self.refresh_button = ttk.Button(action_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.load_parsed_data)
        self.refresh_button.pack(side="left", padx=5)

    def load_categories(self):
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM categories")
            categories = [row["name"] for row in cursor.fetchall()]
            conn.close()
            self.category_cb["values"] = categories
            if categories:
                self.category_var.set(categories[0])
                self.load_subcategories()  # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            else:
                self.category_var.set("")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

    def load_subcategories(self, event=None):
        category = self.category_var.get()
        if not category:
            self.subcategory_cb["values"] = []
            self.subcategory_var.set("")
            return
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT s.name FROM subcategories s JOIN categories c ON s.category_id = c.id WHERE c.name=%s", (category,))
            subcategories = [row["name"] for row in cursor.fetchall()]
            conn.close()
            self.subcategory_cb["values"] = subcategories
            if subcategories:
                self.subcategory_var.set(subcategories[0])
            else:
                self.subcategory_var.set("")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

    def add_record(self):
        category_name = self.category_var.get()
        subcategory_name = self.subcategory_var.get()
        title = self.title_entry.get().strip()
        description = self.description_text.get("1.0", "end").strip()
        image_url = self.image_url_entry.get().strip()
        link = self.link_entry.get().strip()
        current_date = datetime.datetime.now()
        sub_description = ""
        status = 0
        order_index = 0

        if not category_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return
        if not subcategory_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return

        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM categories WHERE name=%s", (category_name,))
            category_row = cursor.fetchone()
            if not category_row:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
                conn.close()
                return
            category_id = category_row["id"]

            cursor.execute("SELECT id FROM subcategories WHERE name=%s AND category_id=%s", (subcategory_name, category_id))
            subcategory_row = cursor.fetchone()
            if not subcategory_row:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
                conn.close()
                return
            subcategory_id = subcategory_row["id"]

            insert_sql = """
            INSERT INTO parsed_data 
            (category_id, subcategory_id, title, description, image_url, link, sub_description, `current_date`, status, order_index)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            cursor.execute(insert_sql, (category_id, subcategory_id, title, description, image_url, link, sub_description, current_date, status, order_index))
            conn.commit()
            conn.close()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ parsed_data.")
            self.clear_inputs()
            self.load_parsed_data()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", e)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")

    def clear_inputs(self):
        self.title_entry.delete(0, tk.END)
        self.description_text.delete("1.0", tk.END)
        self.image_url_entry.delete(0, tk.END)
        self.link_entry.delete(0, tk.END)

    def load_parsed_data(self):
        for item in self.tree.get_children():
            self.tree.delete(item)
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            query = """
            SELECT pd.id, c.name as category, s.name as subcategory, pd.title, pd.description, pd.image_url, pd.link, pd.current_date, pd.status, pd.order_index
            FROM parsed_data pd
            LEFT JOIN categories c ON pd.category_id = c.id
            LEFT JOIN subcategories s ON pd.subcategory_id = s.id
            ORDER BY pd.id ASC
            """
            cursor.execute(query)
            rows = cursor.fetchall()
            conn.close()
            for row in rows:
                self.tree.insert("", tk.END, values=(
                    row["id"],
                    row["category"],
                    row["subcategory"],
                    row["title"],
                    row["description"],
                    row["image_url"],
                    row["link"],
                    row["current_date"],
                    row["status"],
                    row["order_index"]
                ))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def delete_selected(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        item = selected[0]
        record = self.tree.item(item, "values")
        record_id = record[0]
        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å ID {record_id}?")
        if confirm:
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("DELETE FROM parsed_data WHERE id=%s", (record_id,))
                conn.commit()
                conn.close()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
                self.load_parsed_data()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")

    def delete_all(self):
        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ parsed_data?")
        if confirm:
            try:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("DELETE FROM parsed_data")
                conn.commit()
                conn.close()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.")
                self.load_parsed_data()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")


class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–∞—Ä—Å–∏–Ω–≥–∞")
        self.geometry("700x700")
        self.create_widgets()
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

    def create_widgets(self):
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill="both", expand=True)

        self.modules_tab = ModulesTab(self.notebook)  # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º ModulesTab
        self.categories_tab = CategoriesTab(self.notebook, self.modules_tab)  # –ü–µ—Ä–µ–¥–∞—ë–º modules_tab –≤ CategoriesTab
        self.tasks_tab = TasksTab(self.notebook)
        self.bot_settings_tab = BotSettingsTab(self.notebook)
        self.db_settings_tab = DatabaseSettingsTab(self.notebook, on_success_callback=self.reload_all_tabs)
        self.parsed_data_tab = ParsedDataTab(self.notebook)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.notebook.add(self.categories_tab, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        self.notebook.add(self.modules_tab, text="–ú–æ–¥—É–ª–∏")
        self.notebook.add(self.tasks_tab, text="–ó–∞–¥–∞—á–∏")
        self.notebook.add(self.bot_settings_tab, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.notebook.add(self.db_settings_tab, text="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        self.notebook.add(self.parsed_data_tab, text="Parsed Data")

        self.categories_tab.set_update_callback(lambda: (
            self.parsed_data_tab.load_categories(),
            self.modules_tab.refresh_category_dropdown(),
            self.modules_tab.refresh_modules_list(),
            self.tasks_tab.refresh_categories(),
            self.tasks_tab.refresh_tasks()
        ))

    def reload_all_tabs(self):
        self.categories_tab.refresh_categories()
        self.modules_tab.refresh_category_dropdown()
        self.modules_tab.refresh_modules_list()
        self.tasks_tab.refresh_categories()
        self.tasks_tab.refresh_tasks()
        self.bot_settings_tab.refresh_bot_settings()

    def on_closing(self):
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        global BOT_PROCESS
        if BOT_PROCESS is not None:
            try:
                BOT_PROCESS.terminate()
                BOT_PROCESS.join(timeout=5)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ BOT_PROCESS: {e}")
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –≤ ModulesTab
        if hasattr(self, "modules_tab") and hasattr(self.modules_tab, "scheduled_tasks"):
            for timer in self.modules_tab.scheduled_tasks.values():
                timer.cancel()
        self.destroy()


if __name__ == "__main__":
    import multiprocessing
    multiprocessing.freeze_support()
    auth_window = DBAuthWindow()
    auth_window.mainloop()
